#include <iostream>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <string>
#include <cassert>
#include <iomanip>

using namespace std;
#define DEBUG

unordered_map<string, vector<string>> grammar;
string omega;

void initialize() {
/*
    grammar["S"] = {"AB"};
    grammar["A"] = {"BC", "a"};
    grammar["B"] = {"AC", "b"};
    grammar["C"] = {"b", "a"};

    omega="ababa";
*/
    grammar["S"] = {"AB","BC"};
    grammar["A"] = {"BA", "a"};
    grammar["B"] = {"CC", "b"};
    grammar["C"] = {"AB", "a"};

    omega="aabaaab";
}

void printGrammar(){
    cout<<"Grammar: \n";
    for(auto &[lhs,rhsList]:grammar){
        cout<<"    "<<lhs<<" -> ";
        for (size_t i = 0; i < rhsList.size(); ++i) {
            assert(rhsList[i].size() <= 2);
            cout << setw(2) << rhsList[i];
            if (i != rhsList.size() - 1) {
                cout << " | ";
            }
        }
        cout<<"\n";
    }
    cout<<"\n";
    cout<<"String: \n";
    cout<<"    "<<omega<<"\n";
}
void printX(vector<vector<unordered_set<string>>> X) {
    int n=X.size();
    for (int len = 0; len < n; len++) {
        for (int i = 0; i < n - len; i++) {
            cout << "X_" << i + 1 << i + 1 + len << " = { ";
            int cnt = X[i][i + len].size();
            if(cnt==0){
                cout<<" }";
                for(int j=0;j<5;j++) cout<<"   ";
            }
            if(cnt==1){
                for (auto &v: X[i][i + len]) {
                    cout << v << " }";
                }
                for(int j=0;j<5;j++) cout<<"  ";
            }
            if(cnt>1){
                for (auto &v: X[i][i + len]) {
                    cout << v << ", ";
                }
                cout << "\b\b }";
                for(int j=0;j<5-cnt;j++) cout<<"   ";
            }



        }
        cout << "\n";
    }
}
bool contains(const unordered_set<string>& set, const string& value) {
    return set.find(value) != set.end();
}

bool CYK(const string& str) {
    int n = str.size();
    if (n == 0) return false;

    vector<vector<unordered_set<string>>> X(n, vector<unordered_set<string>>(n));

    for (int i = 0; i < n; ++i) {
        string terminal(1, str[i]);
        for (const auto &[lhs, rhsList]: grammar) {
            for (const string &rhs: rhsList) {
                if (rhs == terminal) {
                    X[i][i].insert(lhs);
                }
            }
        }
    }

    for (int len = 2; len <= n; len++) {
        for (int i = 0; i <= n - len; i++) {
            int j = i + len - 1;
            for (int k = i; k < j; k++) {
                for (const auto &[lhs, rhsList]: grammar) {
                    for (const string &rhs: rhsList) {
                        if (rhs.size() == 2) {
                            string v1(1, rhs[0]);
                            string v2(1, rhs[1]);
                            if (contains(X[i][k], v1) && contains(X[k + 1][j], v2)) {
                                X[i][j].insert(lhs);
                            }
                        }
                    }
                }
            }
        }
    }
#ifdef DEBUG
    printX(X);
#endif
    return contains(X[0][n - 1], "S");
}
int main(){
    initialize();
#ifdef DEBUG
    printGrammar();
#endif
    if((CYK(omega))) cout<<"The string can be generated by the grammar.\n";
    else cout<<"The string cannot be generated by the grammar.\n";

    return 0;
}
